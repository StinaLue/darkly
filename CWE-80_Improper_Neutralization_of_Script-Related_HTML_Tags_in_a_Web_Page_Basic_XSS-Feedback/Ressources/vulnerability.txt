HOW WE FOUND IT:

1. On main page, we find the feedback page link (http://darkly/?page=feedback)
2. Form with Name and Message, test it, find parameters "txtName" (Name field) / "mtxtMessage" (Message field) / "btnSign" (needs to be there for the POST request to take effect)
3. Name field is length restricted but ONLY ON CLIENT SIDE (<input name="txtName" type="text" size="30" maxlength="10"...>)
4. As our input gets stored and reflected, we test for classic XSS vectors (<script>, alert ...)
5. mtxtMessage param seems well protected, but not txtName ("<>" works on txtName, not on mtxtMessage)
6. We inject typical XSS payload in txtName param, modifying our script to bypass the poor restrictions put in place (<sCrIPt>alert(1);</ScRiPT>)
7. SUCCESS, our payload gets executed, we get the flag

PROBLEM:
The feedback page is vulnerable to Stored Cross Site Scripting
Any user visiting the page can be tricked into executing malicious code injected on the page
The malicious code can for instance be used to steal user sessions 

SOLUTION:
-Whitelist user input
-Sanitize input AND output (encoding etc) so that no unwanted javascript code can be executed 
-Make user session cookies HttpOnly (which makes the cookie unreachable by Javascript code)
-Add HTTP security headers designed to provide additional security concerning XSS attacks (Content Security Policy, X-XSS-Protection)

