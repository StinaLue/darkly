HOW WE FOUND IT:

1. On main page, we find the feedpack page link (http://darkly/?page=feedback)
2. Form with Name and Message, test it, find parameters "txtName" (Name field) / "mtxtMessage" (Message field) / "btnSign" (needs to be there for the POST request to take effect)
3. Name field is length restricted but ONLY ON CLIENT SIDE (<input name="txtName" type="text" size="30" maxlength="10"...>)
4. As our input gets stored and reflected, we test for classic XSS vectors (<script>, alert ...)
5. mtxtMessage param seems well protected, but not txtName ("<>" works on txtName, not on mtxtMessage)
6. We inject typical XSS payload in txtName param, modifying our script to bypass the poor restrictions put in place (<sCrIPt>alert(1);</ScRiPT>)
7. SUCCESS, our payload gets executed, we get the flag

PROBLEM:

Website is vulnerable to path-traversal attacks.
Any file present on the server can be read by anyone including critical files.



SOLUTION:

If possible, don't use user input when using filesystem calls

Probably easiest solution: associate each authorized filename to a number.
Other way to solve that: Whitelisting authorized files and blacklisting inputs of path traversal (../../, .., %2e%2e%2f, etc.)
