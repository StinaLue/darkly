HOW WE FOUND IT
On the main page we find the signin page (http://darkly/?page=signin)

We identify the GET parameters used for authentication (page/username/password/Login)

Let's try to perform a dictionary attack on it ! (Try all possible password combinations in a wordlist until we find the right one)

We are going to use the most well known tool for bruteforce and dictionary attacks on web forms --> HYDRA

here is the command we are going to launch to attack the website :
hydra -l admin -P /opt/rockyou.txt darkly http-get-form "/index.php:page=signin&username=^USER^&password=^PASS^&Login=Login:WrongAnswer"

We give the target user with the -l parameter (here "admin", as this is often a default account on many platforms)
The password list is provided with the -P parameter
Then, you put your host (darkly, locally resolving to the IP address, in our case)
The next param is the type of form you are attacking, in our case, an HTTP GET form (BTW, one should never process logins with GET requests)
Finally, you input a string separated by ":"
1) the target page
2) the target params (^USER^ and ^PASS^ being automatically replaced by the -l and -P params)
3) a way to indicate to HYDRA when a login attempt failed (in our case, there is always the string "WrongAnswer" in the HTTP response)

we launch this command, and end up finding the password quite quickly : "shadow" (what a great password for an admin)

we try to connect with the admin:shadow credentials

SPECIAL NOTE : It is of course possible to create a script to bruteforce ourselves, however, it is way less efficient

SUCCESS ! We get the flag

PROBLEM
The platform doesn't implement any restriction concerning bruteforce login attacks.
Logically, the website should block requests for at least some time after too many tries.
The other problem is the weak password for the admin.
This indicates that there is no password policy on this platform, which is also a problem in itself.

SOLUTION
- Restrict login tries after too many attempts (delay requests, block them for some time...)
- Implement a strong password policy, not allowing passwords too short, with no numbers, special characters etc
